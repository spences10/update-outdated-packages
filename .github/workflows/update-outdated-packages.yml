name: Update Outdated Packages

on:
  schedule:
    - cron: '0 0 * * 0' # Runs every Sunday at midnight
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  run_check_outdated_packages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch the full history to enable force-pushes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Check for outdated packages
        id: outdated
        run: |
          set +e
          OUTDATED_PACKAGES=$(pnpm outdated -r --json)
          echo "Outdated packages output:"
          echo "$OUTDATED_PACKAGES"
          OUTDATED_PACKAGES_ESCAPED=$(echo "$OUTDATED_PACKAGES" | jq -Rs . | tr -d '\n')
          echo "OUTDATED_PACKAGES=$OUTDATED_PACKAGES_ESCAPED" >> $GITHUB_ENV
          echo "::set-output name=outdated::$OUTDATED_PACKAGES"
          set -e

      - name: Create pull requests for outdated packages
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const outdated = JSON.parse(process.env.OUTDATED_PACKAGES);
              const packages = JSON.parse(outdated);

              const githubToken = `${{ secrets.ACTIONS_GITHUB_TOKEN }}`;
              const octokit = new GitHub(githubToken);

              const { owner, repo } = context.repo;

              Object.keys(packages).forEach(async (packageName) => {
                const { wanted, dependentPackages } = packages[packageName];

                for (const dependentPackage of dependentPackages) {
                  try {
                    const response = await octokit.rest.repos.createFork({
                      owner,
                      repo,
                    });

                    const fork = response.data;

                    await octokit.rest.repos.createBranch({
                      owner: fork.owner.login,
                      repo: fork.name,
                      ref: `update-${packageName}-to-${wanted}`,
                    });

                    await octokit.rest.repos.createPullRequest({
                      owner,
                      repo,
                      head: `${fork.owner.login}:update-${packageName}-to-${wanted}`,
                      base: 'main',
                      title: `Update ${packageName} to ${wanted}`,
                      body: `Update ${packageName} to version ${wanted} in ${dependentPackage.name}`,
                    });
                  } catch (error) {
                    console.error(`Error while creating PR for ${packageName}: ${error.message}`);
                  }
                }
              });
            } catch (error) {
              console.error(`Error while processing outdated packages: ${error.message}`);
            }
          github-token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        env:
          OUTDATED_PACKAGES: ${{ steps.outdated.outputs.outdated }}
